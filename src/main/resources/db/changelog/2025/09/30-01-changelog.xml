<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.31.xsd"
        objectQuotingStrategy="QUOTE_ONLY_RESERVED_WORDS">

    <!-- TASK-1.4: Migrate legacy users.master_id into master_account and user_membership. -->

    <!-- Ensure OWNER role exists -->
    <changeSet id="1759228800000-ensure-owner-role" author="RillG">
        <preConditions onFail="CONTINUE">
            <!-- Run this changeSet when OWNER role is missing -->
            <sqlCheck expectedResult="0">SELECT COUNT(*)
                                         FROM roles
                                         WHERE name = 'OWNER'</sqlCheck>
        </preConditions>
        <sql>
            INSERT INTO roles(name)
            SELECT 'OWNER' WHERE NOT EXISTS (SELECT 1 FROM roles WHERE name = 'OWNER');
        </sql>
    </changeSet>

    <!-- Create master_account rows for distinct users.master_id -->
    <changeSet id="1759228800000-backfill-master-account" author="RillG">
        <sql>
            INSERT INTO master_account(id, name, status, created_at, updated_at)
            SELECT u.master_id,
                   CONCAT('Master ', u.master_id) as name,
                   'ACTIVE'                       as status,
                   NOW(),
                   NOW()
            FROM users u
            WHERE u.master_id IS NOT NULL
              AND NOT EXISTS (SELECT 1
                              FROM master_account m
                              WHERE m.id = u.master_id)
            GROUP BY u.master_id;
        </sql>
        <rollback>
            -- No rollback: data migration
        </rollback>
    </changeSet>

    <!-- Create user_membership for each user with master_id -->
    <changeSet id="1759228800000-backfill-user-membership" author="RillG">
        <sql>
            INSERT INTO user_membership(user_id, master_id, brand_id, pickup_point_id, role, status, two_factor_enabled,
                                        created_at, updated_at)
            SELECT u.id,
                   u.master_id,
                   NULL,
                   NULL,
                   NULL,
                   'ACTIVE',
                   FALSE,
                   NOW(),
                   NOW()
            FROM users u
            WHERE u.master_id IS NOT NULL
              AND NOT EXISTS (SELECT 1 FROM user_membership um WHERE um.user_id = u.id AND um.master_id = u.master_id);
        </sql>
        <rollback>
            -- No rollback: data migration
        </rollback>
    </changeSet>

    <!-- Grant OWNER role to users that have their own master_id (self-registered owners) -->
    <changeSet id="1759228800000-grant-owner-role" author="RillG">
        <preConditions onFail="MARK_RAN">
            <!-- Proceed only if OWNER role exists -->
            <sqlCheck expectedResult="1">SELECT COUNT(*)
                                         FROM roles
                                         WHERE name = 'OWNER'</sqlCheck>
        </preConditions>
        <sql>
            INSERT INTO user_roles(user_id, role_id)
            SELECT u.id, r.id
            FROM users u
                     JOIN roles r ON r.name = 'OWNER'
            WHERE u.master_id IS NOT NULL
              AND NOT EXISTS (SELECT 1 FROM user_roles ur WHERE ur.user_id = u.id AND ur.role_id = r.id);
        </sql>
        <rollback>
            -- No rollback: data migration
        </rollback>
    </changeSet>

</databaseChangeLog>
